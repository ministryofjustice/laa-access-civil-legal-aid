name: Test

on:
  workflow_call:
    inputs:
      ACCESS_ECR_REGION:
        required: true
        type: string
      CLA_BACKEND_ECR_REPOSITORY:
        required: true
        type: string
    secrets:
      ECR_ROLE_TO_ASSUME:
        required: true
env:
  SECRET_KEY: "TEST_KEY"


jobs:
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/generated/requirements-development.txt
        

    - name: Unit test with pytest
      run: |
        pip install pytest pytest-cov
        coverage run -m pytest tests/unit_tests
        coverage xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml-report
        path: coverage.xml

  functional_test:
    name: Functional Test
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Assume role in Cloud Platform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.ACCESS_ECR_REGION }}

      - name: Login to container repository
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        with:
          mask-password: true

      - name: Docker login
        run: |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.CLA_BACKEND_ECR_REPOSITORY }}
          REGION: ${{ inputs.ACCESS_ECR_REGION }}

      - name: Run CLA Backend with Docker Compose
        run: |
            echo "CLA_BACKEND_IMAGE=$REGISTRY/$REPOSITORY:latest" >> .env
            
            docker compose -f tests/backend-compose.yml up -d --wait --wait-timeout 30
          
            sleep 5
          
            docker compose exec cla_backend bin/create_db.sh
        env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: ${{ inputs.CLA_BACKEND_ECR_REPOSITORY }}

      - name: Test connection
        run: |
            docker ps -a # List all containers
            echo "Database logs:"
            docker logs cla_backend_db
            echo "Backend logs:"
            docker logs cla_backend
            curl --retry-connrefused --retry 30 --retry-delay 1 --max-time 30 -v http://127.0.0.1:8010/status

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/generated/requirements-development.txt
  
      - name: Functional test with pytest
        run: |
          pip install pytest pytest-cov
          npm install
          npm run build
          playwright install
          pytest tests/functional_tests --doctest-modules --junitxml=junit/functional-test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-functional-results
          path: junit/functional-test-results.xml
        if: ${{ always() }}
  
      - name: Upload axe results
        uses: actions/upload-artifact@v4
        with:
          name: axe-results
          path: tests/functional_tests/accessibility_output/*.json
        if: ${{ always() }}
