name: Test

on: workflow_call

env:
  SECRET_KEY: "TEST_KEY"
  ENVIRONMENT: CI


jobs:
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/generated/requirements-development.txt
        

    - name: Unit test with pytest
      run: |
        pip install pytest pytest-cov
        coverage run -m pytest tests/unit_tests
        coverage xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml-report
        path: coverage.xml

  functional_test:
    runs-on: ubuntu-latest
    container:
      image: python:2.7

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout CLA Backend
      uses: actions/checkout@v4
      with:
        repository: ministryofjustice/cla_backend
        path: cla_backend

    - name: Install CLA Backend dependencies
      run: |
        cd cla_backend
        python2.7 -m pip install -r requirements/production.txt

    - name: Initialize CLA Backend Database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        cd cla_backend
        python2.7 manage.py db upgrade
        python2.7 manage.py seed_data

    - name: Set up Python for Functional Tests
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/generated/requirements-development.txt

    - name: Install Node.js dependencies
      run: |
        npm install
        npm run build
        playwright install

    - name: Functional test with pytest
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        pip install pytest pytest-cov
        pytest tests/functional_tests --doctest-modules --junitxml=junit/functional-test-results.xml --cov=com --cov-report=xml --cov-report=html

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-functional-results
        path: junit/functional-test-results.xml
      if: ${{ always() }}

    - name: Upload axe results
      uses: actions/upload-artifact@v4
      with:
        name: axe-results
        path: tests/functional_tests/accessibility_output/*.json
      if: ${{ always() }}