name: Test

on:
  workflow_call:
    inputs:
      ACCESS_ECR_REGION:
        required: true
        type: string
      CLA_BACKEND_ECR_REPOSITORY:
        required: true
        type: string
    secrets:
      ECR_ROLE_TO_ASSUME:
        required: true
env:
  SECRET_KEY: "TEST_KEY"


jobs:
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/generated/requirements-development.txt
        

    - name: Unit test with pytest
      run: |
        pip install pytest pytest-cov
        coverage run -m pytest tests/unit_tests
        coverage xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml-report
        path: coverage.xml

  functional_test:
    name: Functional Test
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Assume role in Cloud Platform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.ACCESS_ECR_REGION }}

      - name: Login to container repository
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        with:
          mask-password: true

      - name: Docker login
        run: |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.CLA_BACKEND_ECR_REPOSITORY }}
          REGION: ${{ inputs.ACCESS_ECR_REGION }}
  
      - name: Set up Docker Compose
        run: |
          # Ensure docker-compose file exists in expected location
          test -f tests/backend-compose.yml || exit 1
          
          # Create .env file for any default environment variables
          echo "ENVIRONMENT=development" > .env
          echo "DOCKER_DATABASE_PORT_MAPPING=5433:5432" >> .env

      - name: Run CLA Backend with Docker Compose
        run: |
          # Override the build directive with the pulled image
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPOSITORY=${{ inputs.CLA_BACKEND_ECR_REPOSITORY }}
          
          # Create a modified compose file using yq or sed
          sed -e "s|build:|image: $REGISTRY/$REPOSITORY:latest|g" \
              -e "/context:/d" \
              -e "/target:/d" \
              tests/backend-compose.yml > docker-compose.override.yml
          
          # Start the services
          docker compose -f docker-compose.override.yml up -d
          
          # Wait for services to be ready
          timeout 30 bash -c 'until curl -s http://localhost:8010/status > /dev/null; do sleep 1; done'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.CLA_BACKEND_ECR_REPOSITORY }}

      - name: Test connection
        run: |
          curl -s -v http://127.0.0.1:8010/status
          curl -s -v http://127.0.0.1:8010/checker/api/v1/organisation/
          curl -s -v http://localhost:8010/status
          curl -s -v http://localhost:8010/checker/api/v1/organisation/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/generated/requirements-development.txt
  
      - name: Functional test with pytest
        run: |
          pip install pytest pytest-cov
          npm install
          npm run build
          playwright install
          pytest tests/functional_tests --doctest-modules --junitxml=junit/functional-test-results.xml --cov=com --cov-report=xml --cov-report=html

      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-functional-results
          path: junit/functional-test-results.xml
        if: ${{ always() }}
  
      - name: Upload axe results
        uses: actions/upload-artifact@v4
        with:
          name: axe-results
          path: tests/functional_tests/accessibility_output/*.json
        if: ${{ always() }}
