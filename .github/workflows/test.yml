name: Test

on: workflow_call

env:
  SECRET_KEY: "TEST_KEY"
  ENVIRONMENT: CI


jobs:
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/generated/requirements-development.txt
        

    - name: Unit test with pytest
      run: |
        pip install pytest pytest-cov
        coverage run -m pytest tests/unit_tests
        coverage xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml-report
        path: coverage.xml

  functional_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io
        sudo service docker start

    - name: Clone CLA Backend
      run: git clone https://github.com/ministryofjustice/cla_backend ${{ github.workspace }}/cla_backend

    - name: Run create_db.sh in Python 2.7 Docker container
      run: |
        docker run --rm -v ${{ github.workspace }}/cla_backend:/workspace -w /workspace python:2.7 bash -c "
          python --version &&
          pip install --upgrade pip &&
          pip install -r requirements.txt &&
          bin/create_db.sh
        "
    - name: Set up Python for Functional Tests
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/generated/requirements-development.txt

    - name: Install Node.js dependencies
      run: |
        npm install
        npm run build
        playwright install

    - name: Functional test with pytest
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        pip install pytest pytest-cov
        pytest tests/functional_tests --doctest-modules --junitxml=junit/functional-test-results.xml --cov=com --cov-report=xml --cov-report=html

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-functional-results
        path: junit/functional-test-results.xml
      if: ${{ always() }}

    - name: Upload axe results
      uses: actions/upload-artifact@v4
      with:
        name: axe-results
        path: tests/functional_tests/accessibility_output/*.json
      if: ${{ always() }}