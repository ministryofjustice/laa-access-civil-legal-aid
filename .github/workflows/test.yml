name: Test

on: workflow_call

env:
  SECRET_KEY: "TEST_KEY"
  ENVIRONMENT: CI


jobs:
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip' # caching pip dependencies

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/generated/requirements-development.txt
        

    - name: Unit test with pytest
      run: |
        pip install pytest pytest-cov
        coverage run -m pytest tests/unit_tests
        coverage xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml-report
        path: coverage.xml

  functional_test:
    name: Functional Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Build the Access container
        run: |
          docker compose -f compose-standalone.yml build

      - name: Build the Backend container
        run: |
          git clone https://github.com/ministryofjustice/cla_backend ../cla_backend
          docker compose -f compose.yml build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
  
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/generated/requirements-development.txt
          npm install
          npm run build
          playwright install
  
      - name: Run functional tests inside the container
        run: |
          docker run cla_backend
          docker run govuk-frontend-flask
          docker exec -t "govuk-frontend-flask" pytest tests/functional_tests --doctest-modules --junitxml=junit/functional-test-results.xml --cov=com --cov-report=xml --cov-report=html
  
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-functional-results
          path: junit/functional-test-results.xml
        if: ${{ always() }}
  
      - name: Upload axe results
        uses: actions/upload-artifact@v4
        with:
          name: axe-results
          path: tests/functional_tests/accessibility_output/*.json
        if: ${{ always() }}
